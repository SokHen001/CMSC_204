The most stressful part of the project was writing and running the JUnit tests. I understood the importance of thoroughly testing every part of the application, but running into unexpected test failures was nerve-wracking. Each failed test added more pressure, especially when I couldn’t immediately figure out why the test failed. However, these setbacks taught me the importance of persistence and problem-solving in software development. With every bug I fixed, the code became more reliable, and seeing the tests pass was incredibly rewarding, but the journey was filled with moments of self-doubt and uncertainty.

This project was an eye-opening experience, but it wasn’t without its struggles. Implementing graph structures and Dijkstra’s algorithm forced me to think deeply about how data structures can be used to solve real-world problems. While the theory was clear, translating it into working code presented challenges. The complexity of managing nodes, edges, and weights in the graph often led to moments of frustration when the code didn’t behave as expected. Debugging these issues felt like navigating through a maze, especially when errors seemed to pop up out of nowhere, and it wasn’t always obvious where the problem lay.

Another challenge I faced was managing time and maintaining focus throughout the project. Balancing this work with other responsibilities sometimes made it difficult to dedicate the necessary time to solve complex problems. There were moments when I felt overwhelmed, especially as deadlines approached, and I had to find a way to stay organized and keep pushing forward. Despite the stress, this experience helped me develop better time management skills and reinforced the importance of breaking down complex problems into smaller, more manageable tasks.